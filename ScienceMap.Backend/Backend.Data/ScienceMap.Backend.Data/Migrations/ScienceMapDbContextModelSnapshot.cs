// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScienceMap.Backend.Data;

namespace ScienceMap.Backend.Data.Migrations
{
    [DbContext(typeof(ScienceMapDbContext))]
    partial class ScienceMapDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.AuthorName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("MIDDLE_NAME");

                    b.HasKey("Id");

                    b.HasAlternateKey("FirstName")
                        .HasName("AlternateKey_FirstName");

                    b.ToTable("SM_AUTHOR_NAME");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Keywords")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("KEYWORDS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("StateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("STATE_ID");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("SM_SCS");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectDiscussion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<Guid>("DiscussionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DISCUSSION_ID");

                    b.Property<DateTime?>("InitiatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("INITIATED_DATE");

                    b.Property<Guid>("InitiatedUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INITIATED_USER_ID");

                    b.Property<string>("Keywords")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("KEYWORDS");

                    b.Property<Guid>("ScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_ID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("InitiatedUserId");

                    b.HasIndex("ScsId");

                    b.ToTable("SM_SCS_DISCUSSION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectPublication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("OriginatorUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ORIGINATOR_USER_ID");

                    b.Property<Guid>("PublicationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUBLICATION_ID");

                    b.Property<Guid>("ScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_ID");

                    b.Property<Guid>("ScsPublicationStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_PUBLICATION_STATE_ID");

                    b.HasKey("Id");

                    b.HasIndex("OriginatorUserId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("ScsId");

                    b.HasIndex("ScsPublicationStateId");

                    b.ToTable("SM_SCS_PUBLICATION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectPublicationState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_SCS_PUBLICATION_STATE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ParentScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PARENT_SCS_ID");

                    b.Property<Guid>("ScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_ID");

                    b.HasKey("Id");

                    b.HasIndex("ParentScsId");

                    b.HasIndex("ScsId");

                    b.ToTable("SM_SCS_RELATION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_SCS_STATE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool>("AppliedUserOrchestratorRole")
                        .HasColumnType("bit")
                        .HasColumnName("APPLIED_USER_ORCHESTRATOR_ROLE");

                    b.Property<Guid>("ScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_ID");

                    b.Property<string>("SuggestedOrchestratorMail")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("SUGGESTED_ORCHESTRATOR_MAIL");

                    b.Property<string>("SuggestedOrchestratorName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("SUGGESTED_ORCHESTRATOR_NAME");

                    b.Property<string>("SuggestedOrchestratorPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SUGGESTED_ORCHESTRATOR_PHONE");

                    b.Property<Guid>("SuggestedUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SUGGESTED_USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("ScsId");

                    b.HasIndex("SuggestedUserId");

                    b.ToTable("SM_SCS_SUGGESTION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_ID");

                    b.Property<Guid>("ScsUserRoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_USER_ROLE_ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("ScsId");

                    b.HasIndex("ScsUserRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SM_SCS_USER");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_SCS_USER_ROLE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.Discussion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("DiscussionTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DISCUSSION_TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionTypeId");

                    b.ToTable("SM_DISCUSSION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.DiscussionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<Guid>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CREATED_USER_ID");

                    b.Property<Guid>("DiscussionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DISCUSSION_ID");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PARENT_ID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DiscussionId");

                    b.ToTable("SM_DISCUSSION_ENTRY");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.DiscussionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_DISCUSSION_TYPE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("OrganisationStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ORGANISATION_STATE_ID");

                    b.Property<Guid>("OrganisationTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ORGANISATION_TYPE_ID");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SHORT_NAME");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationStateId");

                    b.HasIndex("OrganisationTypeId");

                    b.ToTable("SM_ORGANISATION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.OrganisationState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_ORGANISATION_STATE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.OrganisationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_ORGANISATION_TYPE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CREATED_USER_ID");

                    b.Property<string>("NOTE")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NOTE");

                    b.Property<Guid>("PubIdSource")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_ID_SOURCE");

                    b.Property<Guid>("PubIdTarget")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_ID_TARGET");

                    b.Property<Guid>("PubInfluenceTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_INFLUENCE_TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PubIdSource");

                    b.HasIndex("PubIdTarget");

                    b.HasIndex("PubInfluenceTypeId");

                    b.ToTable("SM_PUB_INFLUENCE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<Guid>("DiscussionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DISCUSSION_ID");

                    b.Property<Guid>("OriginatorUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ORIGINATOR_USER_ID");

                    b.Property<Guid>("PubInfluenceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_INFLUENCE_ID");

                    b.Property<Guid>("PubInfluenceRateTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_INFLUENCE_RATE_TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("OriginatorUserId");

                    b.HasIndex("PubInfluenceId");

                    b.HasIndex("PubInfluenceRateTypeId");

                    b.ToTable("SM_PUB_INFLUENCE_RATE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceRateType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_PUB_INFLUENCE_RATE_TYPE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("PubInfluenceTypeAssementId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_INFLUENCE_TYPE_ASSEMENT_ID");

                    b.Property<Guid>("PubInfluenceTypeStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_INFLUENCE_TYPE_STATE_ID");

                    b.HasKey("Id");

                    b.HasIndex("PubInfluenceTypeAssementId");

                    b.HasIndex("PubInfluenceTypeStateId");

                    b.ToTable("SM_PUB_INFLUENCE_TYPE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceTypeAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_PUB_INFLUENCE_TYPE_ASSESSMENT");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceTypeState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_PUB_INFLUENCE_TYPE_STATE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceTypeSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("PubInfluenceTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUB_INFLUENCE_TYPE_ID");

                    b.Property<Guid>("SuggestedUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SUGGESTED_USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("PubInfluenceTypeId");

                    b.HasIndex("SuggestedUserId");

                    b.ToTable("SM_PUB_INFLUENCE_TYPE_SUGGESTION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Abstract")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ABSTRACT");

                    b.Property<string>("AdditionalDetails")
                        .HasMaxLength(360)
                        .HasColumnType("nvarchar(360)")
                        .HasColumnName("ADDITIONAL_DETAILS");

                    b.Property<Guid>("PublicationStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUBLICATION_STATE_ID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("TITLE");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.HasKey("Id");

                    b.HasIndex("PublicationStateId");

                    b.ToTable("SM_PUBLICATION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PublicationAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AuthorNameId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AUTHOR_NAME_ID");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int")
                        .HasColumnName("ORDER_KEY");

                    b.Property<Guid>("PublicationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUBLICATION_ID");

                    b.HasKey("Id");

                    b.HasIndex("AuthorNameId");

                    b.HasIndex("PublicationId");

                    b.ToTable("SM_PUBLICATION_AUTHOR");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PublicationState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_PUBLICATION_STATE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("EncryptedPasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ENCRYPTED_PASSWORD_HASH");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("USER_NAME");

                    b.Property<Guid>("UserStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_STATE_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserStateId");

                    b.ToTable("SM_USER");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("PublicationAuthorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PUBLICATION_AUTHOR_ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("PublicationAuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("SM_USER_AUTHOR");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserFavAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("FavUserAuthorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FAV_USER_AUTHOR_ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("FavUserAuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("SM_USER_FAV_AUTHOR");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserFavClassificationSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("ScsId");

                    b.HasIndex("UserId");

                    b.ToTable("SM_USER_FAV_SCS");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserFollowerDiscussion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("DiscussionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DISCUSSION_ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("SM_USER_FOLLOWER_DISCUSSION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserOrganisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int")
                        .HasColumnName("ORDER_KEY");

                    b.Property<Guid>("OrganisationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ORGANISATION_ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("SM_USER_ORGANISATION");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.Property<Guid>("UserRoleTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ROLE_TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleTypeId");

                    b.ToTable("SM_USER_ROLE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserRoleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DESCRIPTION");

                    b.Property<Guid>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_USER_ROLE_TYPE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserScsMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ScsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCS_ID");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("ScsId");

                    b.HasIndex("UserId");

                    b.ToTable("SM_USER_SCS");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("SM_USER_STATE");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubject", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubjectState", "ClassificationSubjectState")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationSubjectState");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectDiscussion", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.Discussion", "Discussion")
                        .WithMany()
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("InitiatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ScsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationSubject");

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectPublication", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("OriginatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ScsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubjectPublicationState", "ClassificationSubjectPublicationState")
                        .WithMany()
                        .HasForeignKey("ScsPublicationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationSubject");

                    b.Navigation("ClassificationSubjectPublicationState");

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectRelation", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ParentClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ParentScsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ScsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassificationSubject");

                    b.Navigation("ParentClassificationSubject");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectSuggestion", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ScsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("SuggestedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationSubject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.ClassificationSubjectUser", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ScsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubjectUserRole", "ClassificationSubjectUserRole")
                        .WithMany()
                        .HasForeignKey("ScsUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationSubject");

                    b.Navigation("ClassificationSubjectUserRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.Discussion", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.DiscussionType", "DiscussionType")
                        .WithMany()
                        .HasForeignKey("DiscussionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscussionType");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.DiscussionEntry", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.Discussion", "Discussion")
                        .WithMany()
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.Organisation", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.OrganisationState", "OrganisationState")
                        .WithMany()
                        .HasForeignKey("OrganisationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganisationState");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluence", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.Publication", "PublicationSource")
                        .WithMany()
                        .HasForeignKey("PubIdSource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.Publication", "PublicationTarget")
                        .WithMany()
                        .HasForeignKey("PubIdTarget")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.PubInfluenceType", "PubInfluenceType")
                        .WithMany()
                        .HasForeignKey("PubInfluenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PubInfluenceType");

                    b.Navigation("PublicationSource");

                    b.Navigation("PublicationTarget");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceRate", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.Discussion", "Discussion")
                        .WithMany()
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("OriginatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.PubInfluence", "PubInfluence")
                        .WithMany()
                        .HasForeignKey("PubInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.PubInfluenceRateType", "PubInfluenceRateType")
                        .WithMany()
                        .HasForeignKey("PubInfluenceRateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("PubInfluence");

                    b.Navigation("PubInfluenceRateType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceType", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.PubInfluenceTypeAssessment", "PubInfluenceTypeAssessment")
                        .WithMany()
                        .HasForeignKey("PubInfluenceTypeAssementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.PubInfluenceTypeState", "PubInfluenceTypeState")
                        .WithMany()
                        .HasForeignKey("PubInfluenceTypeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PubInfluenceTypeAssessment");

                    b.Navigation("PubInfluenceTypeState");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PubInfluenceTypeSuggestion", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.PubInfluenceType", "PubInfluenceType")
                        .WithMany()
                        .HasForeignKey("PubInfluenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("SuggestedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PubInfluenceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.Publication", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.PublicationState", "PublicationState")
                        .WithMany()
                        .HasForeignKey("PublicationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicationState");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.PublicationAuthor", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.AuthorName", "AuthorName")
                        .WithMany()
                        .HasForeignKey("AuthorNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorName");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.User", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.UserState", "UserState")
                        .WithMany()
                        .HasForeignKey("UserStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserState");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserAuthor", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.PublicationAuthor", "PublicationAuthor")
                        .WithMany()
                        .HasForeignKey("PublicationAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicationAuthor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserFavAuthor", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.UserAuthor", "UserAuthor")
                        .WithMany()
                        .HasForeignKey("FavUserAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserAuthor");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserFavClassificationSubject", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ScsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationSubject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserFollowerDiscussion", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.Discussion", "Discussion")
                        .WithMany()
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserOrganisation", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserRole", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.UserRoleType", "UserRoleType")
                        .WithMany()
                        .HasForeignKey("UserRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRoleType");
                });

            modelBuilder.Entity("ScienceMap.Backend.Data.Models.UserScsMapping", b =>
                {
                    b.HasOne("ScienceMap.Backend.Data.Models.ClassificationSubject", "ClassificationSubject")
                        .WithMany()
                        .HasForeignKey("ScsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceMap.Backend.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationSubject");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
